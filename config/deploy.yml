# Name of your application. Used to uniquely configure containers.
service: rails-shortener

# Name of the container image.
image: yule/rails-shortener

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: yule
  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - 443:443
    volume:
      - '/letsencrypt/acme.json:/letsencrypt/acme.json' # chmod 600
  args:
    entryPoints.web.address: ':80'
    entryPoints.websecure.address: ':443'
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: is.yuler@gmail.com
    certificatesResolvers.letsencrypt.acme.storage: /letsencrypt/acme.json
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Deploy to these servers.
servers:
  web:
    hosts:
      - 8.140.245.144
    options:
      add-host: host.docker.internal:host-gateway
    labels:
      traefik.http.routers.shortener_cloud.rule: Host(`yuler.cc`)
      traefik.http.routers.shortener_cloud_secure.entrypoints: websecure
      traefik.http.routers.shortener_cloud_secure.rule: Host(`yuler.cc`)
      traefik.http.routers.shortener_cloud_secure.tls: true
      traefik.http.routers.shortener_cloud_secure.tls.certresolver: letsencrypt
  job:
    hosts:
      - 8.140.245.144
    # Or something like bin/job
    cmd: bundle exec sidekiq

# Use accessory services (secrets come from .env).
accessories:
  redis:
    image: redis:7.0
    roles:
      - web
    port: '6379:6379'
    volumes:
      - /var/lib/redis:/data

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DEMO: TEST
  secret:
    - RAILS_MASTER_KEY
    # SITE
    - SITE_HOST
    # Redis
    - REDIS_URL
    # SMTP
    - SMTP_USERNAME
    - SMTP_PASSWORD
    # SIDEKIQ
    - SIDEKIQ_USERNAME
    - SIDEKIQ_PASSWORD

# Using volumes
volumes:
  - '/home/rails/rails-shortener/storage:/rails/storage'

# Configure builder setup.
builder:
  remote:
    arch: amd64
    host: unix:///Users/<%= `whoami`.strip %>/.docker/run/docker.sock

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
boot:
  limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
  wait: 2
